(def constant TT_DAMAGEMETER_INSTALLED true) #for modconfig
(def constant ADM_ELEMENT_NAME 'advancedDamageMeter') #for modconfig

(def css $ADM_TextStyle()
	(extends $TextDefaultNM)
	(extends $FontEnableReadability)
	(filters 
		(dropShadow 
			(distance = 1)
			(angle = 90)
			(color = 0x08222a)
			(alpha = 0.5)
			(blurX = 2.0)
			(blurY = 2.0)
			(strength = 1.0)
			(quality = 2)
		)
	)
)

(def constant ADM_FONT_COLORS [
	"FONT_CLASS_TO_COLOR['$FontColorDefault']",
	"FONT_CLASS_TO_COLOR['$FontColorBuoyancy']",
	"FONT_CLASS_TO_COLOR['$FontColorGolden']",
	"FONT_CLASS_TO_COLOR['$FontColorGreen']",
	"FONT_CLASS_TO_COLOR['$FontColorOrange']",
])

(def constant ADM_SHIP_ICON_COLOR_PRESET [
	#Use -(234-0x??)
	#None
	{
		Auxiliary:	{},
		AirCarrier:	{},
		Battleship:	{},
		Cruiser:	{},
		Destroyer: 	{},
		Submarine:	{},
	},
	#Aslain v1
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:    0},
		AirCarrier:	{redOffset: -106, greenOffset:  -64, blueOffset:   21, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -106, blueOffset: -106, alphaOffset:    0},
		Cruiser:	{redOffset:	  21, greenOffset: 	  0, blueOffset: -106, alphaOffset:    0},
		Destroyer: 	{redOffset:	 -64, greenOffset: 	 21, blueOffset: -106, alphaOffset:    0},
		Submarine:	{redOffset: -207, greenOffset:    4, blueOffset:   11, alphaOffset:    0},
	},
	#Aslain v2
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:    0},
		AirCarrier:	{redOffset:  -43, greenOffset: -106, blueOffset:   21, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -106, blueOffset: -106, alphaOffset:    0},
		Cruiser:	{redOffset:	  21, greenOffset: 	  0, blueOffset: -106, alphaOffset:    0},
		Destroyer: 	{redOffset:	 -64, greenOffset: 	 21, blueOffset: -106, alphaOffset:    0},
		Submarine:	{redOffset: -106, greenOffset:  -64, blueOffset:   21, alphaOffset:    0},
	},
	#AutoSpy
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset: -128},
		AirCarrier:	{redOffset: -134, greenOffset: -134, blueOffset: -134, alphaOffset: -128},
		Battleship:	{redOffset: -234, greenOffset: -184, blueOffset: -154, alphaOffset: -128},
		Cruiser:	{redOffset: -89,  greenOffset: -159, blueOffset: -234, alphaOffset: -128},
		Destroyer: 	{redOffset: -184, greenOffset: -134, blueOffset: -184, alphaOffset: -128},
		Submarine:	{redOffset: -224, greenOffset: -224, blueOffset: -224, alphaOffset: -128},
	},
	#Roslich
	{
		Auxiliary:	{redOffset:   21, greenOffset: -234, blueOffset:   21, alphaOffset:    0},
		AirCarrier:	{redOffset:   21, greenOffset:   21, blueOffset: -234, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -234, blueOffset: -234, alphaOffset:    0},
		Cruiser:	{redOffset: -234, greenOffset: -234, blueOffset:   21, alphaOffset:    0},
		Destroyer: 	{redOffset: -234, greenOffset:    0, blueOffset: -234, alphaOffset:    0},
		Submarine:	{redOffset: -234, greenOffset:   21, blueOffset:   21, alphaOffset:    0},
	},
	#DeCease
	{
		Auxiliary:	{redOffset:   11, greenOffset: -235, blueOffset:   40, alphaOffset:    0},
		AirCarrier:	{redOffset:   -9, greenOffset:  -60, blueOffset: -119, alphaOffset:    0},
		Battleship:	{redOffset:  -65, greenOffset:  -74, blueOffset:   40, alphaOffset:    0},
		Cruiser:	{redOffset:   20, greenOffset:  -76, blueOffset: -128, alphaOffset:    0},
		Destroyer: 	{redOffset: -137, greenOffset:   11, blueOffset: -124, alphaOffset:    0},
		Submarine:	{redOffset: -255, greenOffset: -255, blueOffset: -255, alphaOffset:    0},
	},
	#Hakabase
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:  -70},
		AirCarrier:	{redOffset: -226, greenOffset:   -7, blueOffset:   21, alphaOffset:  -70},
		Battleship:	{redOffset:   21, greenOffset: -234, blueOffset: -234, alphaOffset:  -70},
		Cruiser:	{redOffset:	  21, greenOffset: 	 21, blueOffset: -234, alphaOffset:  -70},
		Destroyer: 	{redOffset:	-234, greenOffset: 	 21, blueOffset: -234, alphaOffset:  -70},
		Submarine:	{redOffset:   21, greenOffset: -234, blueOffset:  -81, alphaOffset:  -70},
	},
])

(def constant ADM_PLAYER_INFO_WIDTH 120px)
(def constant ADM_SHIP_NAME_WIDTH 90px)
(def constant ADM_ROW_HEIGHT 15px)
(def constant ADM_ROW_GAP 2px)

(def constant ADM_INCOMING_LOGS_KEY 'modAdvancedDamageMeterIncomingDamage')
(def constant ADM_OUTGOING_LOGS_KEY 'modAdvancedDamageMeterOutgoingDamage')

(def macro ADM_GET_DAMAGELOGS()
	(var __damageLogKey:str = "_isIncomingDamage ? ADM_INCOMING_LOGS_KEY : ADM_OUTGOING_LOGS_KEY")
	(var __damageMeterEntityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_DataComponent, __damageLogKey)")
	(var __damageMeterEntity:gfx = "__damageMeterEntityWatcher.entity" (event "__damageMeterEntityWatcher.event"))
	(var __dataComponent:gfx = "__damageMeterEntity && __damageMeterEntity.hasComponent(CC.mods_DataComponent) ? __damageMeterEntity.mods_DataComponent : null" (event "__damageMeterEntity.evAdded"))
	(var damageLogs:array = "__dataComponent ? __dataComponent.data.damageLogs : []" (event "__dataComponent.evDataChanged"))
)

(def element ADM_AdvancedDamageMeter() layout=true
	(scope
		(macro STAGE_SIZE)
	)

	(style
		(bind width "stageWidth")
		(bind height "stageHeight")
	)

	(element ADM_DamageMeterItem _isIncomingDamage="true")
	(element ADM_DamageMeterItem _isIncomingDamage="false")
)

(def element ADM_DamageMeterItem(_isIncomingDamage:bool=true)
	(scope
		#Userprefs
		(macro TT_GET_USERPREF)

		(var isVisiblePref:dict =  "_isIncomingDamage ? ADM_PREFS.INCOMING_DAMAGE_VISIBLE : ADM_PREFS.OUTGOING_DAMAGE_VISIBLE")

		(macro TT_GET_PREF_NUMBER _varName="'scale'" 				_pref="ADM_PREFS.SCALE")
		(macro TT_GET_PREF_NUMBER _varName="'rowCounts'" 			_pref="ADM_PREFS.NUM_ROWS")
		(macro TT_GET_PREF_NUMBER _varName="'rowGap'" 				_pref="ADM_PREFS.ROW_HEIGHT")
		(macro TT_GET_PREF_NUMBER _varName="'fontStylePrefIndex'"	_pref="ADM_PREFS.FONT_STYLE_INDEX")
		(macro TT_GET_PREF_NUMBER _varName="'backgroundAlpha'"		_pref="ADM_PREFS.BACKGROUND_ALPHA")

		(macro TT_GET_PREF_BOOL _varName="'isEnabled'" 			_pref="isVisiblePref")
		(macro TT_GET_PREF_BOOL _varName="'isVisibleOnAlt'"		_pref="ADM_PREFS.VISIBLE_ON_ALT")
		(macro TT_GET_PREF_BOOL _varName="'isBackgroundVisibleOnAlt'"	_pref="ADM_PREFS.BACKGROUND_VISIBLE_ON_ALT")
		(macro TT_GET_PREF_BOOL _varName="'isReversed'" 			_pref="ADM_PREFS.REVERSE_ROWS")
		(macro TT_GET_PREF_BOOL _varName="'isPositionLocked'"		_pref="ADM_PREFS.DISABLE_DRAGDROP")

		# DamageLogEntity
		(macro ADM_GET_DAMAGELOGS)

		# Header Text
		(var headerText:str = "_isIncomingDamage ? 'IDS_TAKEN_DAMAGE_HINT' : 'IDS_BATTLE_STATS_CAUSED_DAMAGE'")

		# Visibility
		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera.altVision" (event "camera.evAltVisionChanged"))
		(var isVisible:bool = "isEnabled ? (isVisibleOnAlt ? altVision : true) : false")

		# Background
		(var isBackgroundVisible:bool = "isBackgroundVisibleOnAlt ? altVision : true")

		# Font style
		(var fontStyleIndex:number = "fontStylePrefIndex < ADM_FONT_COLORS.length ? fontStylePrefIndex : 0")
		(var fontColor:number = "ADM_FONT_COLORS[fontStyleIndex]")

		# Draggable
		(macro STAGE_SIZE)
		(var elementName:str = "ADM_ELEMENT_NAME + (_isIncomingDamage ? 'Incoming' : 'Outgoing')")
		(var defaultPos:dict = "{positionX: 500, positionY: (_isIncomingDamage ? (stageHeight - 110) : (stageHeight - 220))}")
		(macro DRAGGABLE_GET_DROP_POSITION _wndName="elementName" _defaults="defaultPos")
	)

	(bind visible "isVisible")

	(style
		(position = "absolute")
		(bind left "dragPosX")
		(bind top "dragPosY")
	)

	(block
		(style
			(bind scaleX "scale")
			(bind scaleY "scale")
		)

		(controller $Instance renderer='ModDraggableElement'
			(bind enabled "!isPositionLocked")
			(args
				_wndName="elementName"
				_defaults="defaultPos"
			)
		)
		#(element ModDraggableElement _wndName="elementName" _defaults="defaultPos")

		(block
			(style
				(hitTest = false)
			)
			(mc contrast_panel
				(class $FullsizeAbsolute)
				(bind visible "isBackgroundVisible")
				(style
					(bind alpha "backgroundAlpha")
				)
			)

			(block
				(style
					(padding = 10px)
					(bind vgap "8px + rowGap")
				)

				# Header Text
				(tf
					(class $TextDefaultBoldNM)
					(style
						(bind textColor "fontColor")
					)
					(bind text "headerText")
				)

				# Damage Rows
				(block
					(style
						(bind vgap "rowGap")
						(bind height "rowCounts * (rowGap + ADM_ROW_HEIGHT) - rowGap")
						(bind flow "isReversed ? Flow.REVERSE_VERTICAL : Flow.VERTICAL")
					)
					(controller $Repeat renderer='ADM_DamageMeterRowItem'
						(bind count "rowCounts")
						(args
							_damageLogData="damageLogs[$index]"
						)
					)
				)
			)
		)
	)

	# Mod Config
	(element TT_ConfigButtonElement _modIndex = "8"
		(style
			(left = -30px)
		)
	)
)

(def element ADM_DamageMeterRowItem(_damageLogData:dict=null)
	(scope
		(var activeLog:bool = "$index == 0")
	)

	(bind visible "activeLog || _damageLogData ? true : false")
	(style
		(bind alpha "activeLog && !_damageLogData ? 0 : 1.0")
	)
	# In order for the draggable window wdith to be fixed,
	# At least one element needs to be visible, even if the damageLog is empty

	(style
		(height = "ADM_ROW_HEIGHT")
		(flow = "Flow.HORIZONTAL")
		(align = "middle|center")
		(marginLeft = 7px)
	)

	# (block
	# 	(class $FullsizeAbsolute)
	# 	(style
	# 		(backgroundColor = 0x0FFFFFFF)
	# 	)
	# )
	(element ADM_RowIndexItem _index="$index")
	(element ADM_PlayerNameAndTagItem _damageLogData="_damageLogData")
	(element ADM_ShipInfoItem _damageLogData="_damageLogData")
	(element ADM_DamageInfoItem _damageLogData="_damageLogData" _isAnimated="activeLog")
)

(def element ADM_RowIndexItem(_index:number)
	(scope
		(macro TT_GET_USERPREF)

		(macro TT_GET_PREF_BOOL 	_varName="'isRowIndexVisible'" 	_pref="ADM_PREFS.ROW_INDEX_VISIBLE")

		(var indexText:str = "'' + (_index + 1) + '.'")
	)

	(bind visible "isRowIndexVisible")

	(style
		(height = 100%)
		(align = "middle|center")
		(alpha = "0.6")
		(width = 22px)
	)

	(element ADM_TextItem _text="indexText" _width="100%")
)

(def element ADM_PlayerNameAndTagItem(_damageLogData:dict)
	(scope
		# Userprefs
		(macro TT_GET_USERPREF)

		(macro TT_GET_PREF_BOOL 	_varName="'isClanTagVisible'" 		_pref="ADM_PREFS.CLAN_TAG_VISIBLE")
		(macro TT_GET_PREF_BOOL 	_varName="'isPlayerNameVisible'" 	_pref="ADM_PREFS.PLAYER_NAME_VISIBLE")
		(macro TT_GET_PREF_NUMBER 	_varName="'widthModifier'"			_pref="ADM_PREFS.PLAYER_INFO_WIDTH")

		# Names
		(var playerName:str = "isPlayerNameVisible && _damageLogData ? _damageLogData.playerName : ''")

		(var clanTag:str = "_damageLogData ? _damageLogData.clanTag : ''")
		(var clanTagWithBrackets:str = "isClanTagVisible && clanTag ? '[' + clanTag + ']' : ''")

		(var nameWithTag:str = "clanTagWithBrackets + playerName")

		(var nameWidth:number = "ADM_PLAYER_INFO_WIDTH * widthModifier")
	)

	(style
		(height = 100%)
		(align = "middle|center")
	)

	(bind visible "isClanTagVisible || isPlayerNameVisible")

	(element ADM_TextItem _text="nameWithTag" _width="nameWidth")
)

(def element ADM_ShipInfoItem(_damageLogData:dict)
	(scope
		# Userprefs
		(macro TT_GET_USERPREF)

		(macro TT_GET_PREF_BOOL	_varName="'isShipNameVisible'" 	_pref="ADM_PREFS.SHIP_NAME_VISIBLE")
		(macro TT_GET_PREF_BOOL 	_varName="'isShipTypeVisible'" 	_pref="ADM_PREFS.SHIP_TYPE_VISIBLE")
		(macro TT_GET_PREF_NUMBER 	_varName="'widthModifier'"			_pref="ADM_PREFS.SHIP_NAME_WIDTH")
		(macro TT_GET_PREF_NUMBER 	_varName="'shipTypeStylePrefIndex'"	_pref="ADM_PREFS.SHIP_TYPE_STYLE_INDEX")

		# Names
		(var shipName:str = "_damageLogData ? tr(_damageLogData.shipNameIDS) : ''")
		(var shipType:str = "_damageLogData ? _damageLogData.subtype : ''")

		# Width
		(var nameWidth:number = "ADM_SHIP_NAME_WIDTH * widthModifier")

		# Color
		(var shipTypeStyleIndex:number = "shipTypeStylePrefIndex < ADM_SHIP_ICON_COLOR_PRESET.length ? shipTypeStylePrefIndex : 0")
		(var shipTypeStyle:dict = "ADM_SHIP_ICON_COLOR_PRESET[shipTypeStyleIndex]")
		(var shipTypeColorTransform:dict = "shipTypeStyle[shipType]")
		(var shipIcon:str = "'url:../battle_hud/markers/ship/icon_white_' + toLower(shipType) + '.png'")
	)

	(style
		(height = 100%)
		(flow = "Flow.HORIZONTAL")
		(align = "center|middle")
	)

	# Ship Type
	(block
		(bind visible "isShipTypeVisible")
		(style
			(width = "SHIP_ICON_SIZE.WIDTH")
			(height = "SHIP_ICON_SIZE.HEIGHT")
		)
		(block
			# For better edge for colored icons
			(style
				(bind backgroundImage "shipIcon")
			)
		)
		(block
			(bind colorTransform "shipTypeColorTransform")
			(style
				(bind backgroundImage "shipIcon")
			)
		)
	)

	# Ship Name
	(element ADM_TextItem _text="shipName" _width="nameWidth"
		(bind visible "isShipNameVisible")
	)
)

(def element ADM_DamageInfoItem(_damageLogData:dict, _isAnimated:bool=false)
	(scope
		# Userprefs
		(macro TT_GET_USERPREF)

		(macro TT_GET_PREF_BOOL _varName="'isLastDamageVisible'" 	_pref="ADM_PREFS.LAST_DAMAGE_VISIBLE")

		# Damages
		(var totalDamage:number = "_damageLogData ? _damageLogData.totalDamage : 0")
		(var lastDamage:number = "_damageLogData ? _damageLogData.lastDamage : 0")

		# Victim: this must be updated AFTER totalDamage
		# Otherwise it will show incorrect (previous player's) damage
		# Relying on the execution order may not be smart though
		(var victimId:number = "_damageLogData ? _damageLogData.victimId : 0")
		(event evPlayerChanged)
		(dispatch evPlayerChanged args="{}" (bind trigger "victimId"))

		(var animatedTotalDamage:number = "_isAnimated ? 0 : totalDamage" watch=false (event "evPlayerChanged"))
		(controller $Animation
			(bindcall play	duration = 0.6
							to = "{ animatedTotalDamage: totalDamage}"
							easing="Easing.cubic_out"
							(bind enabled "_isAnimated")
							(bind trigger "totalDamage")
							(event "evPlayerChanged")
			)
		)
		
		(var totalDamageText:str = "ceil(animatedTotalDamage)")
		(var lastDamageText:str = "'(+' + lastDamage")
	)

	(style
		(height = 100%)
		(flow = "Flow.HORIZONTAL")
		(align = "center|middle")
	)

	(element ADM_TextItem _text="totalDamageText" _width="50px" _textAlign="right")
	(hblock
		(style
			(align = "middle|center")
			(height = 100%)
			(alpha = "0.6")
		)
		(bind visible "isLastDamageVisible")
		
		(element ADM_TextItem _text="lastDamageText" _width="60px" _textAlign="right")
		(element ADM_AmmoIconItem _damageLogData="_damageLogData")
		(element ADM_TextItem _text="')'")
	)
)

(def element ADM_TextItem(_text:str, _width:number="'auto'", _textAlign:number = "left")
	(scope
		# Userprefs
		(macro TT_GET_USERPREF)

		(macro TT_GET_PREF_NUMBER _varName="'fontStylePrefIndex'" _pref="ADM_PREFS.FONT_STYLE_INDEX")

		# Names
		(var fontStyleIndex:number = "fontStylePrefIndex < ADM_FONT_COLORS.length ? fontStylePrefIndex : 0")
		(var fontColor:number = "ADM_FONT_COLORS[fontStyleIndex]")
	)

	(style
		(bind width "_width")
	)

	(tf
		(class $ADM_TextStyle)
		(style
			(bind width "_width")
			(bind textAlign "_textAlign")
			(bind textColor "fontColor")
			(elideMode = "true")
		)
		(bind text "_text")
	)
)

(def element ADM_AmmoIconItem(_damageLogData:dict)
	(scope
		(var ammoType:str = "_damageLogData && _damageLogData.ammoType ? _damageLogData.ammoType : ''")
		(var weaponIconPath:str = "'url:../battle_hud/icon_frag/icon_frag_' + ammoType + '.png'")
	)

	(style
		(bind alpha "ammoType ? 1.0 : 0")
		(width = 21px)
		(height = 21px)
		(marginTop = "-2px")
		(backgroundSize = "fill")
		(bind backgroundImage "weaponIconPath")
	)
)

(def element ADM_ContrastPanel(_isBlur:bool=false, _intensity:number="1.0")
	(scope
		(var panelElement:str = "_isBlur ? 'ADM_ContrastPanelBlur' : 'ADM_ContrastPanelNormal'")
	)
	(class $FullsizeAbsolute)
	(style
		(hitTest = false)
	)
	(controller $Instance
		(bind renderer "panelElement")
		(args "_intensity")
	)
)

(def element ADM_ContrastPanelNormal(_alpha:number=1.0)
	(class $FullsizeAbsolute)
	(mc contrast_panel
		(class $FullsizeAbsolute)
		(bind alpha "_alpha")
	)
)

(def element ADM_ContrastPanelBlur(_blurIntensity:number=0.3)
	(class $FullsizeAbsolute)
	(element DeclareBlurLayer)
	(mc mc_blurmap_medium
		(class $FullsizeAbsolute)
		(rendererString = blurMeBaby)
		(macro ADM_BIND_BLURINTENSITY "_blurIntensity")
	)
)

(def macro ADM_BIND_BLURINTENSITY(_blurIntensity:expression="0.4")
	(controller $Animation
		(bindcall play  duration="0.0001"
						to	 = "{ blurIntensity: _blurIntensity }"
						watch=false
						init=true
						(bind trigger "_blurIntensity")
		)
	)
)